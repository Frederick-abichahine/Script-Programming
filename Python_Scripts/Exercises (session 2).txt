Questions:

1.
Read the protein fasta file and define your dictionary as follows:
Create a dictionary that saves the molecualr weight of all proteins in a fasta file.
The key should be the protein ID.
The values should be the Molecular weight AND  the sequence (make sure the sequence does not have the "-" in it.)

this is the dictionary with molecular weights that can be used
AminoDict={
'A':89.09,
'R':174.20,
'N':132.12,
'D':133.10,
'C':121.15,
'Q':146.15,
'E':147.13,
'G':75.07,
'H':155.16,
'I':131.17,
'L':131.17,
'K':146.19,
'M':149.21,
'F':165.19,
'P':115.13,
'S':105.09,
'T':119.12,
'W':204.23,
'Y':181.19,
'V':117.15,
'X':0.0,
'-':0.0,
'*':0.0 }

2.
translation from RNA to peptide.
RNA sequence can be hard coded. 
Should have a dictionary for translation


Answers:

1.
import sys
import os
print("Hello! Please enter the name(s) of the file(s) you'd like to read! Type 'done' when done entering files.")
file=input()
sequence_names=[]
sequences=[]
count=-1
AminoDict={
'A':89.09,
'R':174.20,
'N':132.12,
'D':133.10,
'C':121.15,
'Q':146.15,
'E':147.13,
'G':75.07,
'H':155.16,
'I':131.17,
'L':131.17,
'K':146.19,
'M':149.21,
'F':165.19,
'P':115.13,
'S':105.09,
'T':119.12,
'W':204.23,
'Y':181.19,
'V':117.15,
'X':0.0,
'-':0.0,
'*':0.0 }
all_hash={}
files_in_dir=os.listdir()
while file!="done":
    if file in files_in_dir:
        print("The file being analyzed is " + file + ". Type 'done' when done entering files.")
        content=open(file)
        content=content.readlines()
        for x in content:
            if x[0:1]==">" or x==content[len(content)-1]:
                if count!=-1:
                    sequences[count]=sequences[count].replace('-', '')
                    mol_weight=0
                    for character in sequences[count]:
                        mol_weight=mol_weight+AminoDict[character]
                    all_hash[sequence_names[count]]=[sequences[count], mol_weight]
                x=x.strip()
                sequence_names.append(x[1:])
                sequences.append("")
                count=count+1
            elif x != "" and x[0:1]!="#":
                sequences[count]=sequences[count] + x.strip() # concat                    
    elif file== "":
        sys.stderr.write("This exercise is to get the percent composition of sequences. To start, you should enter a valid file name.")
    else: # if file not in directory
        sys.stderr.write("File not found! Please enter a valid file name.")
    file=input()

print ("{:<13} {:<20} {:<10}".format('Protein ID','Sequence','Molecular weight'))
for key, value in all_hash.items():
    seq, weight = value
    print ("{:<13} {:<20} {:<10}".format(key, seq[0:15]+"...", round(weight, 2)))

2.
RNA="ACAUGCUAGAAUUAGAUCAUAGAUCAUGCAUGCAUGCGAUCGCGCGACGUAAUUCAGACUACGUCACUUGCACAGUCACGAUGCAGAUGACGGCAUAAGCAGAUUGAGGCAGUAGUAAGCACGAACGAAACACAAAUUUGGGCACACGAUAAGCCGCAUGUACUUGUUAA"

map = {"UUU":"F", "UUC":"F", "UUA":"L", "UUG":"L",
       "UCU":"S", "UCC":"s", "UCA":"S", "UCG":"S",
       "UAU":"Y", "UAC":"Y", "UAA":"STOP", "UAG":"STOP",
       "UGU":"C", "UGC":"C", "UGA":"STOP", "UGG":"W",
       "CUU":"L", "CUC":"L", "CUA":"L", "CUG":"L",
       "CCU":"P", "CCC":"P", "CCA":"P", "CCG":"P",
       "CAU":"H", "CAC":"H", "CAA":"Q", "CAG":"Q",
       "CGU":"R", "CGC":"R", "CGA":"R", "CGG":"R",
       "AUU":"I", "AUC":"I", "AUA":"I", "AUG":"M",
       "ACU":"T", "ACC":"T", "ACA":"T", "ACG":"T",
       "AAU":"N", "AAC":"N", "AAA":"K", "AAG":"K",
       "AGU":"S", "AGC":"S", "AGA":"R", "AGG":"R",
       "GUU":"V", "GUC":"V", "GUA":"V", "GUG":"V",
       "GCU":"A", "GCC":"A", "GCA":"A", "GCG":"A",
       "GAU":"D", "GAC":"D", "GAA":"E", "GAG":"E",
       "GGU":"G", "GGC":"G", "GGA":"G", "GGG":"G",}

start = RNA.find('AUG') # returns index of AUG (start codon)
if start!= -1:
    while start+2 < len(RNA):
        codon = RNA[start:start+3]
        if codon == "UAG" or codon == "UAA" or codon == "UGA": break # if it's a stop codon, exit the loop
        print(map[codon], end="")
        start+=3
